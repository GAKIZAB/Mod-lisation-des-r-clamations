---
title: "Modelisation de sinistralité"
author: "Bertrand GAKIZA"
format: html
editor: visual
---
# Projet modelisationde la fréquence 

## Récupération des données

 Nous disposons d'un ensemble de données intitulé freMTPL2freq, qui concerne 678 013 contrats d'assurance automobile en France. Pour chaque police, nous avons identifié 12 caractéristiques distinctes :
- IDpol : L'identifiant de la police d'assurance.
- ClaimNb : Nombre de déclarations de sinistres durant la période d'exposition.
- Exposure : La période d'exposition à la police d'assurance, en années.
- VehPower : La puissance de la voiture (valeurs ordonnées).
- VehAge : L'âge du véhicule, en années.
- DrivAge : L'âge (en années) du conducteur (en France, on peut conduire dès 18 ans).
- BonusMalus : Bonus/malus, entre 50 et 350 (< 100 pour un bonus, > 100 pour un malus en France).
- VehBrand : La marque de la voiture.
- VehGas : Le type de moteur (diesel ou essence).
- Area : La valeur de densité de la zone urbaine dans laquelle vit le conducteur de la voiture (de "A" pour une zone rurale, jusqu'à "F" pour le centre-ville).
- Density : La densité de population (nombre d'habitants par m²) de la ville dans laquelle vit le conducteur de la voiture.
- Region : La région de la police d'assurance (avec les anciens noms de régions, de l'époque 1970-2015).

```{r}
data <- read.csv("freMTPL2freq.csv", row.names=1, stringsAsFactors=TRUE)
head(data)
```

## Exploration

```{r}
str(data)
```

```{r}
summary(data)
```
## Traitement

```{r}
# Plafonnement du nombre de sinistres à 4
data$ClaimNb <- pmin(data$ClaimNb, 4)
# Plafonnement de la durée d'exposition à 1 (an)
data$Exposure <- pmin(data$Exposure, 1)
# Plafonnement de la puissance à 9
data$VehPower <- pmin(data$VehPower, 9)
# Plafonnement de l'age de la voiture à 40 (ans)
data$VehAge <- pmin(data$VehAge, 40)

```

```{r}
df <- data
# Créer les variables binaires pour les variables catégorielles
# Nous allons utiliser model.matrix
df_dummies <- model.matrix(~ Area + VehBrand + VehGas + Region - 1, data = df)

# Supprimer les colonnes d'origine des variables catégorielles
df <- df[, !(names(df) %in% c("Area", "VehBrand", "VehGas", "Region"))]

# Joindre les variables binaires au DataFrame d'origine
df <- cbind(df, df_dummies)

# Afficher le DataFrame final
head(df)

```

```{r}
X <- data[, c('Exposure', 'Area', 'VehPower', 'VehAge', 'DrivAge', 'BonusMalus', 'VehBrand', 'VehGas', 'Density', 'Region' )]
Y <- data$ClaimNb

```

```{r}
Y <- data$ClaimNb
X <- data[, c("Exposure", "VehPower", "VehAge", "DrivAge", "BonusMalus", "Density")]

# Ajout de la constante (intercept)
X <- cbind(1, X)  # Ajoute une colonne de 1s pour l'intercept

# Régression linéaire
model <- lm(Y ~ ., data=X)  # On utilise -1 pour exclure la colonne de constantes de la formule

# Résumé des résultats
summary(model)

```
```{r}
# Prédictions
predictions <- predict(model)

# Moyenne des prédictions
mean_predictions <- mean(predictions)

# Pourcentage de prédictions inférieures à 0
percentage_below_zero <- 100 * mean(predictions < 0)
print(mean_predictions)
print(percentage_below_zero)
```


```{r}
# Exclure la colonne "Exposure" de X
X_subset <- X[, !colnames(X) %in% "Exposure"]

# Ajuster le modèle
model2 <- glm(Y~., data=X_subset, offset = X$Exposure)

#Résumé du model
summary(model2)
```


```{r}
# Prédictions
predictions2 <- predict(model2)

# Moyenne des prédictions
mean_predictions2 <- mean(predictions2)

# Pourcentage de prédictions inférieures à 0
percentage_below_zero2 <- 100 * mean(predictions2 < 0)
print(mean_predictions2)
print(percentage_below_zero2)
```


```{r}
# Remarque : exposure = X_exposure équivaut à offset = log(X_exposure)

# Ajustement du modèle de Poisson
modelPoisson <- glm(Y~., data=X_subset, family=poisson(link = 'log'), offset = X$Exposure)

# Résumé des résultats du modèle
summary(modelPoisson)
```


```{r}
# Modèle GLM avec offset
modelLM <- glm(Y~., data=X_subset, family = gaussian(), offset = X$Exposure)

# Résumé des résultats du modèle
summary(modelLM)
```
```{r}
100*mean(predict(modelLM)>0)
```
```{r}
```


```{r}
```




The `echo: false` option disables the printing of code (only output is displayed).

